//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CustomExpressionParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Mint.Internal {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CustomExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Error=1, Number=2, WS=3, Sharp=4, Define=5, EqualEqual=6, NotEqual=7, 
		Not=8, And=9, Or=10, Condition=11, Colon=12, GreaterOrEqual=13, LessOrEqual=14, 
		Greater=15, Less=16, Equal=17, Comma=18, Add=19, Sub=20, Mul=21, Div=22, 
		Mod=23, Dot=24, OpenParen=25, CloseParen=26, BackQuote=27, DoubleQuote=28, 
		SingleQuote=29, Identifier=30, PlainTextModeNewLine=31, PlainTextModeNewLine2=32, 
		PlainTextModeNewLine3=33, PlainTextChar=34, EscapedChar=35, EndSingleQuote=36, 
		Char=37, EndDoubleQuote=38, BQExprStart=39, EndBackQuote=40, BQExprEnd=41, 
		EscapedDQ=42, EscapedOpenBrace=43, EscapedBQ=44;
	public const int
		RULE_expList = 0, RULE_exp = 1, RULE_plainTextArgument = 2, RULE_plainTextString = 3, 
		RULE_literal = 4, RULE_identifier = 5, RULE_number = 6, RULE_singleQuotedString = 7, 
		RULE_doubleQuotedString = 8, RULE_backQuoteString = 9, RULE_backQuoteExpr = 10, 
		RULE_anyChar = 11, RULE_char = 12, RULE_escapedChar = 13;
	public static readonly string[] ruleNames = {
		"expList", "exp", "plainTextArgument", "plainTextString", "literal", "identifier", 
		"number", "singleQuotedString", "doubleQuotedString", "backQuoteString", 
		"backQuoteExpr", "anyChar", "char", "escapedChar"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'#'", "':='", "'=='", "'!='", "'!'", "'&&'", 
		"'||'", "'?'", "':'", "'>='", "'<='", "'>'", "'<'", "'='", "','", null, 
		null, null, null, null, null, null, null, null, null, null, null, "'\r\n'", 
		"'\r'", "'\n'", null, "'\\''", null, null, null, "'{'", null, "'}'", "'\\\"'", 
		"'\\{'", "'\\`'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Error", "Number", "WS", "Sharp", "Define", "EqualEqual", "NotEqual", 
		"Not", "And", "Or", "Condition", "Colon", "GreaterOrEqual", "LessOrEqual", 
		"Greater", "Less", "Equal", "Comma", "Add", "Sub", "Mul", "Div", "Mod", 
		"Dot", "OpenParen", "CloseParen", "BackQuote", "DoubleQuote", "SingleQuote", 
		"Identifier", "PlainTextModeNewLine", "PlainTextModeNewLine2", "PlainTextModeNewLine3", 
		"PlainTextChar", "EscapedChar", "EndSingleQuote", "Char", "EndDoubleQuote", 
		"BQExprStart", "EndBackQuote", "BQExprEnd", "EscapedDQ", "EscapedOpenBrace", 
		"EscapedBQ"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CustomExpressionParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CustomExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CustomExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CustomExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpListContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(CustomExpressionParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(CustomExpressionParser.Comma, i);
		}
		public ExpListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpListContext expList() {
		ExpListContext _localctx = new ExpListContext(Context, State);
		EnterRule(_localctx, 0, RULE_expList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << Not) | (1L << Add) | (1L << Sub) | (1L << OpenParen) | (1L << BackQuote) | (1L << DoubleQuote) | (1L << SingleQuote) | (1L << Identifier))) != 0)) {
				{
				State = 28; exp(0);
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 29; Match(Comma);
					State = 30; exp(0);
					}
					}
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext func;
		public IToken op;
		public IToken unop;
		public LiteralContext lit;
		public ExpListContext args;
		public PlainTextArgumentContext ptArg;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode CloseParen() { return GetToken(CustomExpressionParser.CloseParen, 0); }
		public ITerminalNode OpenParen() { return GetToken(CustomExpressionParser.OpenParen, 0); }
		public ITerminalNode Add() { return GetToken(CustomExpressionParser.Add, 0); }
		public ITerminalNode Sub() { return GetToken(CustomExpressionParser.Sub, 0); }
		public ITerminalNode Not() { return GetToken(CustomExpressionParser.Not, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(CustomExpressionParser.Dot, 0); }
		public ITerminalNode Mod() { return GetToken(CustomExpressionParser.Mod, 0); }
		public ITerminalNode Mul() { return GetToken(CustomExpressionParser.Mul, 0); }
		public ITerminalNode Div() { return GetToken(CustomExpressionParser.Div, 0); }
		public ITerminalNode EqualEqual() { return GetToken(CustomExpressionParser.EqualEqual, 0); }
		public ITerminalNode NotEqual() { return GetToken(CustomExpressionParser.NotEqual, 0); }
		public ITerminalNode Less() { return GetToken(CustomExpressionParser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CustomExpressionParser.Greater, 0); }
		public ITerminalNode LessOrEqual() { return GetToken(CustomExpressionParser.LessOrEqual, 0); }
		public ITerminalNode GreaterOrEqual() { return GetToken(CustomExpressionParser.GreaterOrEqual, 0); }
		public ITerminalNode And() { return GetToken(CustomExpressionParser.And, 0); }
		public ITerminalNode Or() { return GetToken(CustomExpressionParser.Or, 0); }
		public ITerminalNode Colon() { return GetToken(CustomExpressionParser.Colon, 0); }
		public ITerminalNode Condition() { return GetToken(CustomExpressionParser.Condition, 0); }
		public ExpListContext expList() {
			return GetRuleContext<ExpListContext>(0);
		}
		public ITerminalNode Sharp() { return GetToken(CustomExpressionParser.Sharp, 0); }
		public PlainTextArgumentContext plainTextArgument() {
			return GetRuleContext<PlainTextArgumentContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenParen:
				{
				State = 39; _localctx.op = Match(OpenParen);
				State = 40; exp(0);
				State = 41; Match(CloseParen);
				}
				break;
			case Not:
			case Add:
			case Sub:
				{
				State = 43;
				_localctx.unop = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Not) | (1L << Add) | (1L << Sub))) != 0)) ) {
					_localctx.unop = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 44; exp(9);
				}
				break;
			case Number:
			case BackQuote:
			case DoubleQuote:
			case SingleQuote:
			case Identifier:
				{
				State = 45; _localctx.lit = literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 82;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 80;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 48;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 49; _localctx.op = Match(Dot);
						State = 50; exp(11);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 51;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 52;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Mul) | (1L << Div) | (1L << Mod))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 53; exp(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 54;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 55;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Sub) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 56; exp(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 57;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 58;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EqualEqual) | (1L << NotEqual) | (1L << GreaterOrEqual) | (1L << LessOrEqual) | (1L << Greater) | (1L << Less))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 59; exp(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 60;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 61;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==Or) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 62; exp(6);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 63;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 64; _localctx.op = Match(Condition);
						State = 65; exp(0);
						State = 66; Match(Colon);
						State = 67; exp(5);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.func = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 69;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 70; Match(OpenParen);
						State = 71; _localctx.args = expList();
						State = 72; Match(CloseParen);
						State = 75;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
						case 1:
							{
							State = 73; Match(Sharp);
							State = 74; _localctx.ptArg = plainTextArgument();
							}
							break;
						}
						}
						break;
					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.func = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 77;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 78; Match(Sharp);
						State = 79; _localctx.ptArg = plainTextArgument();
						}
						break;
					}
					} 
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PlainTextArgumentContext : ParserRuleContext {
		public PlainTextStringContext chars;
		public PlainTextStringContext plainTextString() {
			return GetRuleContext<PlainTextStringContext>(0);
		}
		public PlainTextArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainTextArgument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlainTextArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainTextArgumentContext plainTextArgument() {
		PlainTextArgumentContext _localctx = new PlainTextArgumentContext(Context, State);
		EnterRule(_localctx, 4, RULE_plainTextArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; _localctx.chars = plainTextString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainTextStringContext : ParserRuleContext {
		public ITerminalNode[] PlainTextChar() { return GetTokens(CustomExpressionParser.PlainTextChar); }
		public ITerminalNode PlainTextChar(int i) {
			return GetToken(CustomExpressionParser.PlainTextChar, i);
		}
		public PlainTextStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainTextString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlainTextString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainTextStringContext plainTextString() {
		PlainTextStringContext _localctx = new PlainTextStringContext(Context, State);
		EnterRule(_localctx, 6, RULE_plainTextString);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 87; Match(PlainTextChar);
					}
					} 
				}
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public SingleQuotedStringContext singleQuotedString() {
			return GetRuleContext<SingleQuotedStringContext>(0);
		}
		public DoubleQuotedStringContext doubleQuotedString() {
			return GetRuleContext<DoubleQuotedStringContext>(0);
		}
		public BackQuoteStringContext backQuoteString() {
			return GetRuleContext<BackQuoteStringContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 8, RULE_literal);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; number();
				}
				break;
			case SingleQuote:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; singleQuotedString();
				}
				break;
			case DoubleQuote:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; doubleQuotedString();
				}
				break;
			case BackQuote:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; backQuoteString();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CustomExpressionParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(CustomExpressionParser.Number, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleQuotedStringContext : ParserRuleContext {
		public ITerminalNode SingleQuote() { return GetToken(CustomExpressionParser.SingleQuote, 0); }
		public ITerminalNode EndSingleQuote() { return GetToken(CustomExpressionParser.EndSingleQuote, 0); }
		public AnyCharContext[] anyChar() {
			return GetRuleContexts<AnyCharContext>();
		}
		public AnyCharContext anyChar(int i) {
			return GetRuleContext<AnyCharContext>(i);
		}
		public SingleQuotedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleQuotedString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleQuotedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleQuotedStringContext singleQuotedString() {
		SingleQuotedStringContext _localctx = new SingleQuotedStringContext(Context, State);
		EnterRule(_localctx, 14, RULE_singleQuotedString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(SingleQuote);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EscapedChar || _la==Char) {
				{
				{
				State = 105; anyChar();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 111; Match(EndSingleQuote);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleQuotedStringContext : ParserRuleContext {
		public ITerminalNode DoubleQuote() { return GetToken(CustomExpressionParser.DoubleQuote, 0); }
		public ITerminalNode EndDoubleQuote() { return GetToken(CustomExpressionParser.EndDoubleQuote, 0); }
		public AnyCharContext[] anyChar() {
			return GetRuleContexts<AnyCharContext>();
		}
		public AnyCharContext anyChar(int i) {
			return GetRuleContext<AnyCharContext>(i);
		}
		public DoubleQuotedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleQuotedString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleQuotedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleQuotedStringContext doubleQuotedString() {
		DoubleQuotedStringContext _localctx = new DoubleQuotedStringContext(Context, State);
		EnterRule(_localctx, 16, RULE_doubleQuotedString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(DoubleQuote);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EscapedChar || _la==Char) {
				{
				{
				State = 114; anyChar();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120; Match(EndDoubleQuote);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackQuoteStringContext : ParserRuleContext {
		public ITerminalNode BackQuote() { return GetToken(CustomExpressionParser.BackQuote, 0); }
		public ITerminalNode EndBackQuote() { return GetToken(CustomExpressionParser.EndBackQuote, 0); }
		public AnyCharContext[] anyChar() {
			return GetRuleContexts<AnyCharContext>();
		}
		public AnyCharContext anyChar(int i) {
			return GetRuleContext<AnyCharContext>(i);
		}
		public BackQuoteExprContext[] backQuoteExpr() {
			return GetRuleContexts<BackQuoteExprContext>();
		}
		public BackQuoteExprContext backQuoteExpr(int i) {
			return GetRuleContext<BackQuoteExprContext>(i);
		}
		public BackQuoteStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backQuoteString; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackQuoteString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackQuoteStringContext backQuoteString() {
		BackQuoteStringContext _localctx = new BackQuoteStringContext(Context, State);
		EnterRule(_localctx, 18, RULE_backQuoteString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(BackQuote);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EscapedChar) | (1L << Char) | (1L << BQExprStart))) != 0)) {
				{
				State = 125;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EscapedChar:
				case Char:
					{
					State = 123; anyChar();
					}
					break;
				case BQExprStart:
					{
					State = 124; backQuoteExpr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130; Match(EndBackQuote);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackQuoteExprContext : ParserRuleContext {
		public ITerminalNode BQExprStart() { return GetToken(CustomExpressionParser.BQExprStart, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode BQExprEnd() { return GetToken(CustomExpressionParser.BQExprEnd, 0); }
		public BackQuoteExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backQuoteExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackQuoteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackQuoteExprContext backQuoteExpr() {
		BackQuoteExprContext _localctx = new BackQuoteExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_backQuoteExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(BQExprStart);
			State = 133; exp(0);
			State = 134; Match(BQExprEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyCharContext : ParserRuleContext {
		public CharContext @char() {
			return GetRuleContext<CharContext>(0);
		}
		public EscapedCharContext escapedChar() {
			return GetRuleContext<EscapedCharContext>(0);
		}
		public AnyCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyChar; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyCharContext anyChar() {
		AnyCharContext _localctx = new AnyCharContext(Context, State);
		EnterRule(_localctx, 22, RULE_anyChar);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Char:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; @char();
				}
				break;
			case EscapedChar:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; escapedChar();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharContext : ParserRuleContext {
		public ITerminalNode Char() { return GetToken(CustomExpressionParser.Char, 0); }
		public CharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharContext @char() {
		CharContext _localctx = new CharContext(Context, State);
		EnterRule(_localctx, 24, RULE_char);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(Char);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedCharContext : ParserRuleContext {
		public ITerminalNode EscapedChar() { return GetToken(CustomExpressionParser.EscapedChar, 0); }
		public EscapedCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedChar; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICustomExpressionParserVisitor<TResult> typedVisitor = visitor as ICustomExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapedChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedCharContext escapedChar() {
		EscapedCharContext _localctx = new EscapedCharContext(Context, State);
		EnterRule(_localctx, 26, RULE_escapedChar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(EscapedChar);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '.', '\x93', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\"', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '%', '\v', 
		'\x2', '\x5', '\x2', '\'', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x31', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'N', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', 'S', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'V', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\a', '\x5', '[', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '^', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x65', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\a', '\t', 'm', '\n', '\t', '\f', '\t', '\xE', '\t', 'p', 
		'\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', 'v', '\n', '\n', '\f', '\n', '\xE', '\n', 'y', '\v', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\x80', '\n', '\v', '\f', '\v', '\xE', '\v', '\x83', '\v', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\x8D', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x2', '\x3', 
		'\x4', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\a', '\x4', '\x2', '\n', 
		'\n', '\x15', '\x16', '\x3', '\x2', '\x17', '\x19', '\x3', '\x2', '\x15', 
		'\x16', '\x4', '\x2', '\b', '\t', '\xF', '\x12', '\x3', '\x2', '\v', '\f', 
		'\x2', '\x9B', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'W', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\n', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x66', '\x3', '\x2', '\x2', '\x2', '\xE', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'j', '\x3', '\x2', '\x2', '\x2', '\x12', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '|', '\x3', '\x2', '\x2', '\x2', '\x16', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '#', '\x5', '\x4', '\x3', '\x2', '\x1F', ' ', '\a', 
		'\x14', '\x2', '\x2', ' ', '\"', '\x5', '\x4', '\x3', '\x2', '!', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', 
		'!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', 
		'$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x1E', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\'', '\x3', '\x3', '\x2', '\x2', '\x2', '(', ')', '\b', 
		'\x3', '\x1', '\x2', ')', '*', '\a', '\x1B', '\x2', '\x2', '*', '+', '\x5', 
		'\x4', '\x3', '\x2', '+', ',', '\a', '\x1C', '\x2', '\x2', ',', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '-', '.', '\t', '\x2', '\x2', '\x2', '.', 
		'\x31', '\x5', '\x4', '\x3', '\v', '/', '\x31', '\x5', '\n', '\x6', '\x2', 
		'\x30', '(', '\x3', '\x2', '\x2', '\x2', '\x30', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x33', '\f', '\f', '\x2', '\x2', '\x33', '\x34', 
		'\a', '\x1A', '\x2', '\x2', '\x34', 'S', '\x5', '\x4', '\x3', '\r', '\x35', 
		'\x36', '\f', '\n', '\x2', '\x2', '\x36', '\x37', '\t', '\x3', '\x2', 
		'\x2', '\x37', 'S', '\x5', '\x4', '\x3', '\v', '\x38', '\x39', '\f', '\t', 
		'\x2', '\x2', '\x39', ':', '\t', '\x4', '\x2', '\x2', ':', 'S', '\x5', 
		'\x4', '\x3', '\n', ';', '<', '\f', '\b', '\x2', '\x2', '<', '=', '\t', 
		'\x5', '\x2', '\x2', '=', 'S', '\x5', '\x4', '\x3', '\t', '>', '?', '\f', 
		'\a', '\x2', '\x2', '?', '@', '\t', '\x6', '\x2', '\x2', '@', 'S', '\x5', 
		'\x4', '\x3', '\b', '\x41', '\x42', '\f', '\x6', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\r', '\x2', '\x2', '\x43', '\x44', '\x5', '\x4', '\x3', 
		'\x2', '\x44', '\x45', '\a', '\xE', '\x2', '\x2', '\x45', '\x46', '\x5', 
		'\x4', '\x3', '\a', '\x46', 'S', '\x3', '\x2', '\x2', '\x2', 'G', 'H', 
		'\f', '\x5', '\x2', '\x2', 'H', 'I', '\a', '\x1B', '\x2', '\x2', 'I', 
		'J', '\x5', '\x2', '\x2', '\x2', 'J', 'M', '\a', '\x1C', '\x2', '\x2', 
		'K', 'L', '\a', '\x6', '\x2', '\x2', 'L', 'N', '\x5', '\x6', '\x4', '\x2', 
		'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'S', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\f', '\x4', '\x2', '\x2', 
		'P', 'Q', '\a', '\x6', '\x2', '\x2', 'Q', 'S', '\x5', '\x6', '\x4', '\x2', 
		'R', '\x32', '\x3', '\x2', '\x2', '\x2', 'R', '\x35', '\x3', '\x2', '\x2', 
		'\x2', 'R', '\x38', '\x3', '\x2', '\x2', '\x2', 'R', ';', '\x3', '\x2', 
		'\x2', '\x2', 'R', '>', '\x3', '\x2', '\x2', '\x2', 'R', '\x41', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'G', '\x3', '\x2', '\x2', '\x2', 'R', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 
		'X', '\x5', '\b', '\x5', '\x2', 'X', '\a', '\x3', '\x2', '\x2', '\x2', 
		'Y', '[', '\a', '$', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\t', '\x3', '\x2', 
		'\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '\x65', '\x5', 
		'\xE', '\b', '\x2', '`', '\x65', '\x5', '\x10', '\t', '\x2', '\x61', '\x65', 
		'\x5', '\x12', '\n', '\x2', '\x62', '\x65', '\x5', '\x14', '\v', '\x2', 
		'\x63', '\x65', '\x5', '\f', '\a', '\x2', '\x64', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '`', '\x3', '\x2', '\x2', '\x2', '\x64', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\a', ' ', '\x2', '\x2', 'g', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\a', '\x4', '\x2', '\x2', 'i', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'n', '\a', '\x1F', '\x2', '\x2', 'k', 'm', '\x5', 
		'\x18', '\r', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\a', '&', '\x2', '\x2', 'r', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 's', 'w', '\a', '\x1E', '\x2', '\x2', 't', 'v', '\x5', 
		'\x18', '\r', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'z', '{', '\a', '(', '\x2', '\x2', '{', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '|', '\x81', '\a', '\x1D', '\x2', '\x2', '}', '\x80', 
		'\x5', '\x18', '\r', '\x2', '~', '\x80', '\x5', '\x16', '\f', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x83', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x85', '\a', '*', '\x2', '\x2', '\x85', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x87', '\a', ')', '\x2', '\x2', '\x87', '\x88', 
		'\x5', '\x4', '\x3', '\x2', '\x88', '\x89', '\a', '+', '\x2', '\x2', '\x89', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', '\x5', '\x1A', '\xE', 
		'\x2', '\x8B', '\x8D', '\x5', '\x1C', '\xF', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\'', '\x2', 
		'\x2', '\x8F', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', 
		'%', '\x2', '\x2', '\x91', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'#', '&', '\x30', 'M', 'R', 'T', '\\', '\x64', 'n', 'w', '\x7F', '\x81', 
		'\x8C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Mint.Internal
